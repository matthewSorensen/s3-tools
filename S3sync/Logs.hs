{-# LANGUAGE OverloadedStrings, FlexibleInstances, OverlappingInstances #-}
module S3sync.Logs where


import Data.Text
import Data.Attoparsec.Text hiding (parse)
import Control.Applicative
import Data.Char

type Time = ()

data Requester = Requester Text | Anonymous deriving(Show,Eq)

newtype Quoted = Quoted Text deriving(Show,Eq)

data S3Log = S3Log {
      owner::Text -- The canonical user id of the owner of the source bucket.
    , bucket::Text -- The name of the bucket that the request was processed against.
    , time::Time -- The time at which the request was received.
    , ip::Text -- The apparent Internet address of the requester.
    , requester::Maybe Text -- The canonical user id of the requester, or the string "Anonymous" for unauthenticated requests.
    , requestId::Text -- The request ID is a string generated by Amazon S3 to uniquely identify each request.
    , operation::Text -- Either SOAP.operation or REST.HTTP_method.resource_type.
    , key::Maybe Text -- The "key" part of the request, URL encoded, or "-" if the operation does not take a key parameter.
    , requestURI::Quoted -- The Request-URI part of the HTTP request message.
    , status::Int -- The numeric HTTP status code of the response.
    , errorCode::Maybe Text -- The Amazon S3 Error Code
    , sent::Int -- The number of response bytes sent, excluding HTTP protocol overhead.
    , size::Int -- The total size of the object in question.
    , totalTime::Int -- The number of milliseconds the request was in flight from the server's perspective.
    , turnAround::Int -- The number of milliseconds that Amazon S3 spent processing your request.
    , referrer::Maybe Quoted -- The value of the HTTP Referrer header, if present.
    , userAgent::Maybe Quoted -- The value of the HTTP User-Agent header.
    , versionId::Maybe Text -- The version ID in the request, or "-" if the operation does not take a versionId parameter.
    } deriving (Show,Eq)

parseLog::Parser S3Log
parseLog = fiveteen (three $ pure S3Log) <* endOfLine
    where three f = f <*> parseField <*> parseField <*> parseField
          fiveteen = three . three . three . three . three

class Parse a where
    parse::Parser a

    parseField::Parser a
    parseField = skipSpace *> parse

instance Parse Int where
    parse = decimal <|> (0 <$ char '-')

instance Parse Text where
    parse = takeTill isSpace

instance Parse a=>Parse (Maybe a) where
    parse = (Nothing <$ char '-') <|> (Just <$> parse)

instance Parse Quoted where
    parse = char '"' *> (Quoted <$> scan False sm) <* char '"'
        where sm False '"'  = Nothing
              sm False '\\' = Just True
              sm False _    = Just False
              sm True  _    = Just False

instance Parse (Maybe Quoted) where
    parse = toMaybe <$> parse 
        where toMaybe (Quoted "-") = Nothing
              toMaybe (Quoted t  ) = Just $ Quoted t

-- Shim for time. Implement later.
instance Parse () where
    parse = () <$ (char '[' >> takeTill (==']') >> char ']')
              
instance Parse Requester where
    parse = (Anonymous <$ string "Anonymous") <|> (Requester <$> parse)
